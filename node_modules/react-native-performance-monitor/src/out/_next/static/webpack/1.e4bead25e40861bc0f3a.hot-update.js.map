{"version":3,"file":"static/webpack/1.e4bead25e40861bc0f3a.hot-update.js","sources":["webpack:///./components/App.js"],"sourcesContent":["import React from 'react';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport TimeSeries from 'fusioncharts/fusioncharts.overlappedcolumn2d';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport ReactFC from 'react-fusioncharts/lib/ReactFC';\nimport _ from 'lodash';\nimport parseInput from './parse-input';\nimport Row from './Row';\nimport { max } from 'moment';\n\ndocument.addEventListener('click', function(e) {\n  if (document.activeElement.toString() == '[object HTMLButtonElement]') {\n    document.activeElement.blur();\n  }\n});\n\n\nReactFC.fcRoot(FusionCharts, Charts, TimeSeries, FusionTheme);\nconst colors = [\n  '#5d62b5', '#29c3be', '#f2726f',\n  '#4fb54f', '#c3bf39', '#f26394',\n  '#5d62b5', '#29c3be', '#f2726f',\n  '#4fb54f', '#c3bf39', '#f26394',\n  '#5d62b5', '#29c3be', '#f2726f',\n  '#4fb54f', '#c3bf39', '#f26394',\n  '#5d62b5', '#29c3be', '#f2726f',\n  '#4fb54f', '#c3bf39', '#f26394',\n];\n\nconst exampleState = {\n  'dataSource': {\n    'chart': {\n      'caption': 'React Native Render Times',\n      'subcaption': 'Performance experiments',\n      'yaxisname': 'Render time (ms)',\n      'drawcrossline': '1',\n      'theme': 'fusion',\n      'showvalues': '0',\n      'palettecolors': '5d62b5,29c3be,f2726f,4fb54f,c3bf39,f26394,5d62b5,29c3be,f2726f,4fb54f,c3bf39,f26394,5d62b5,29c3be,f2726f,4fb54f,c3bf39,f26394,5d62b5,29c3be,f2726f,4fb54f,c3bf39,f26394',\n    },\n    'categories': [{ 'category': [{ 'label': 'Test1' }, { 'label': 'Test2' }, { 'label': 'Test3' }] }],\n    'dataset': [{\n      'seriesname': 'Baseline test',\n      'data': [{ 'value': 5 }, { 'value': 5 }, { 'value': 5 }],\n    },\n      { 'seriesname': 'Variant 2', 'data': [{ 'value': 5 }, { 'value': 5 }, { 'value': 5 }] }],\n    'trendlines': [{\n      'line': [{\n        'color': '#5d62b5',\n        'thickness': '4',\n        'startValue': 5,\n        'alpha': '50',\n      }],\n    }, {\n      'line': [{\n        'color': '#29c3be',\n        'thickness': '4',\n        'startValue': 5,\n        'alpha': '50',\n      }],\n    }, { 'line': [{ 'color': '#ff0000', 'thickness': '2', 'startValue': 16.67, 'alpha': '100' }] }],\n  }, 'type': 'overlappedcolumn2d', 'paused': true,\n};\n\n\nfunction ConvertToCSV(objArray) {\n  var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n  var str = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var line = '';\n    for (var index in array[i]) {\n      if (line != '') line += ','\n\n      line += array[i][index];\n    }\n\n    str += line + '\\r\\n';\n  }\n\n  return str;\n}\n\nconst toCSV = function(state) {\n  const datas =  state.dataSource.dataset;\n  let maxNum = 0;\n  let maxIndex = -1;\n\n  let arr = [];\n  let rootObj = {};\n\n  _.each(datas,(d, i)=>{\n    rootObj[i] = d.seriesname;\n    if (d.data.length > maxNum) {\n      maxNum = d.data.length;\n      maxIndex = i;\n     }\n  })\n  if (maxIndex === -1) return\n  arr.push(rootObj)\n  _.each(datas[maxIndex].data, (v, i)=>{ // row\n    let obj = {};\n    _.each(datas,(data)=>{ // column\n      obj[data.seriesname] = data.data[i] && data.data[i].value || \"\";\n    })\n    arr.push(obj);\n  })\n  const csv = \"data:text/csv;charset=utf-8,\" + ConvertToCSV(arr);\n  var encodedUri = encodeURI(csv);\n  var link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodedUri);\n  link.setAttribute(\"download\", \"performance_tests.csv\");\n  document.body.appendChild(link); // Required for FF\n  link.click(); // This will download the data file named \"my_data.csv\".\n}\n\nconst defaultState = {\n  dataSource: {\n    chart: {\n      caption: 'React Native Render Times',\n      subcaption: 'Performance experiments',\n      yaxisname: 'Render time (ms)',\n      drawcrossline: '1',\n      theme: 'fusion',\n      showvalues: '0',\n      'palettecolors': colors.map(c => c.replace('#', '')).join(','),\n    },\n    categories: [\n      {\n        category: [],\n      },\n    ],\n    dataset: [\n      {\n        seriesname: 'Baseline test',\n        data: [],\n      },\n    ],\n  },\n};\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ..._.cloneDeep(defaultState),\n      type: 'overlappedcolumn2d',\n    };\n  }\n\n  componentDidMount() {\n    this.socket = new WebSocket('ws://localhost:8126');\n    this.socket.onopen = function(event) {\n      console.log('Connected');\n    };\n\n    this.socket.onmessage = (event) => {\n      try {\n        if (!this.state.paused) {\n          this.addItem(JSON.parse(event.data).value);\n        }\n      } catch (e) {\n      }\n    };\n  }\n\n  sendRemount = () => {\n    this.socket.send('remount');\n  };\n\n  sendForceUpdate = () => {\n    this.socket.send('forceUpdate');\n  };\n\n  addItem = (value = Math.random()) => {\n    if (!this.state.dataSource.dataset.length) {\n      this.addSeries();\n    }\n    if (this.state.dataSource.categories[0].category.length === this.state.dataSource.dataset[this.state.dataSource.dataset.length - 1].data.length) {\n      this.addCategory();\n    }\n    this.state.dataSource.dataset[this.state.dataSource.dataset.length - 1].data.push({\n      value,\n    });\n    const averages = [];\n    _.each(this.state.dataSource.dataset, (dataSet) => {\n      let total = 0;\n      _.each(dataSet.data, (item) => {\n        total += item.value;\n      });\n      averages.push(total / dataSet.data.length);\n    });\n    this.state.averages = averages;\n    this.state.dataSource.trendlines = averages.map((v, i) => {\n      return {\n        'line': [{\n          'color': colors[i],\n          'thickness': '4',\n          startValue: v,\n          'alpha': '50',\n        }],\n      };\n    }).concat([{\n      line: [{\n        'color': '#ff0000',\n        'thickness': '2',\n        startValue: 16.67,\n        'alpha': '100',\n      }],\n    }]);\n    this.forceUpdate();\n  };\n\n  addCategory = () => {\n    this.state.dataSource.categories[0].category.push({\n      label: `Test${this.state.dataSource.categories[0].category.length + 1}`,\n    });\n  };\n\n  addSeries = () => {\n    this.state.dataSource.dataset.push({\n      seriesname: `Variant ${this.state.dataSource.dataset.length + 1}`,\n      data: [],\n    });\n    this.forceUpdate();\n  };\n\n  setVariantName = (i, e) => {\n    this.state.dataSource.dataset[i].seriesname = parseInput(e);\n    this.forceUpdate();\n  };\n\n  removeSeries = (i) => {\n    this.state.dataSource.dataset.splice(i, 1);\n    this.forceUpdate();\n  };\n\n  clear = () => {\n    this.setState(_.cloneDeep(defaultState));\n  };\n\n  toggle = () => this.setState({ hideMenu: !this.state.hideMenu });\n\n  pauseResume = () => this.setState({ paused: !this.state.paused });\n\n\n  repeat = (cb, times) => {\n    const rep = function(e, currentTimes = 0) {\n      if (currentTimes < times) {\n        cb();\n        setTimeout(() => {\n          rep(null, currentTimes + 1);\n        }, 200);\n      }\n    };\n    return rep;\n  };\n\n  download = () => {\n    toCSV(this.state);\n  }\n\n  render() {\n    const datasets = this.state.dataSource.dataset;\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className={`control-panel${this.state.hideMenu ? ' hidden' : ''}`}>\n            <div style={{ flex: 1 }}>\n              {datasets && datasets.map((d, i) => (\n                <Row key={i} className=\"experiment-row\">\n                  <input\n                    key={i} onChange={e => this.setVariantName(i, e)} type=\"text\"\n                    value={d.seriesname + (this.state.averages && `(${this.state.averages[i]} ms avg)`)}\n                  />\n                  <button onClick={() => this.removeSeries(i)} type=\"button\" className=\"btn btn-default\">\n                    <img width={20} src=\"/static/close.svg\"/>\n                  </button>\n                </Row>\n              ))}\n              <div className=\"text-center mt-2\">\n                <button type=\"button\" className=\"btn btn-primary mr-2\" onClick={this.addSeries}>\n                  Add Experiment\n                </button>\n              </div>\n              <div className=\"text-center mt-2\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.pauseResume}>\n                  {this.state.paused ? 'Resume' : 'Pause'}\n                </button>\n              </div>\n            </div>\n            <div className=\"text-center mt-2 mb-2\">\n              <button\n                style={{ width: 140 }} type=\"button\" className=\"btn mr-4 btn-primary\"\n                onClick={this.sendRemount}\n              >Remount\n              </button>\n              <button\n                style={{ width: 70 }} type=\"button\" className=\"btn mr-2 btn-secondary\"\n                onClick={this.repeat(this.sendRemount, 5)}\n              >x5\n              </button>\n              <button\n                style={{ width: 70 }} type=\"button\" className=\"btn btn-secondary\"\n                onClick={this.repeat(this.sendRemount, 10)}\n              >x10\n              </button>\n            </div>\n            <div className=\"text-center mt-2 mb-2\">\n              <button\n                style={{ width: 140 }} type=\"button\" className=\"btn mr-4 btn-primary\"\n                onClick={this.sendRemount}\n              >Force Update\n              </button>\n              <button\n                style={{ width: 70 }} type=\"button\" className=\"btn mr-2 btn-secondary\"\n                onClick={this.repeat(this.sendForceUpdate, 5)}\n              >x5\n              </button>\n              <button\n                style={{ width: 70 }} type=\"button\" className=\"btn btn-secondary\"\n                onClick={this.repeat(this.sendForceUpdate, 10)}\n              >x10\n              </button>\n            </div>\n            <div className=\"text-center mb-2 mt-4\">\n              <button type=\"button\" className=\"btn btn-primary\" onClick={this.download}>Download</button>\n            </div>\n            <div className=\"text-center mb-2 mt-4\">\n              <button type=\"button\" className=\"btn btn-danger\" onClick={this.clear}>Clear Tests</button>\n            </div>\n\n          </div>\n          <div className=\"content\">\n            <div className=\"nav\">\n              <a onClick={this.toggle}>\n                <img height={34} src=\"/static/menu.svg\"/>\n              </a>\n            </div>\n            <div className=\"content-inner\">\n              <ReactFC\n                type={this.state.type}\n                width=\"100%\"\n                height=\"85%\"\n                dataFormat=\"json\"\n                dataSource={this.state.dataSource}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BA;AA+BA;AAAA;AAhCA;AACA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AASA;AAEA;AADA;AAIA;AAEA;AACA;AAFA;AAhBA;AADA;AACA;;;;;;AAwBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyBA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AA/BA;AAgCA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAOA;AACA;AACA;AAtEA;AAwEA;AACA;AADA;AAGA;AACA;AA5EA;AA8EA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AApFA;AAsFA;AACA;AAAA;AACA;AACA;AAzFA;AA2FA;AACA;AAAA;AACA;AACA;AA9FA;AAgGA;AACA;AACA;AAlGA;AAmGA;AAAA;AAAA;AAAA;AACA;AApGA;AAqGA;AAAA;AAAA;AAAA;AACA;AAtGA;AAyGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnHA;AAqHA;AACA;AACA;AArHA;AAEA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAkGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAYA;;;;AAnNA;AACA;;;;;A","sourceRoot":""}